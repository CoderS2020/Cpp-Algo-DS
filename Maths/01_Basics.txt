1) 1/x + 1/y=n 
If n is given ,find x,y 
so after solving you get (x-n)(y-n)=n^2
for eg, n=36
so we have 18*2=36, 9*4=36, 3*12=36 .....
i.e. a*b=n^2
so x-n=a & y-n=b where a,b are factors of n^2 (hence solved)

2) If we have two arrays and we want to find the sum of products of all pairs
i.e. a=[1,2,3] , b=[7,8,9] so find sum(ai*bj) for all i,j
So instead of running two loops i on a and b on j to get Time complexity as O(n^2)
we can simply do sum=(sum of elements of a)*(sum of elements of b)
Time complexity now becomes O(n) as we run a loop over and b separately, space is O(1)

Binary Exponentiation
3) a^20 (even power) = a^10 *a^10 ( so we can find a^10 and simply multiply it by itself)
a^21 (odd power) = a^10 *a^10 *a (so remove 1 extra power and make it even power and at the end multiply the removed no )

//Find power of number 
//Recursive
a^b
int power(int a,int b){ //O(logn) [base 2] both space(use of stack) and time complexity
    if(b==0) return 1; //base case

    int x=power(a,b/2); //since it is integer division so even if b is odd it will give integer quotient

    if(b%2==0){ //if b is even then simply return square of half
        return x*x;
    }
    else{ //if b is odd
        return x*x*a; //square of half * a
    }
}

//Iterative
int power(int a, int b){ Time complexity=no of bits=logn (base 2) , space complexity=O(1)
    int ans=1;
    while(b>0){
        if(b%2==1){ //if b is odd then multiply by a( taking care of extra 1 power)
            ans=ans*a;
        }
        b=b>>1; //dividing by 2
        a=a*a;
    }
    return ans;
}


